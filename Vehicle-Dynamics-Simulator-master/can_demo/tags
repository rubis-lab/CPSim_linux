!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEFAULT_NODE	can_msg.h	1;"	d
NUM_MSG	can_torcs.cpp	25;"	d	file:
NUM_MSG	can_user.cpp	25;"	d	file:
SHM	can_torcs.cpp	20;"	d	file:
SHM	can_user.cpp	20;"	d	file:
SHM2	can_torcs.cpp	21;"	d	file:
SHM2	can_user.cpp	21;"	d	file:
START_SIM	can_msg.h	11;"	d
STOP_SIM	can_msg.h	12;"	d
TIME_DURATION	can_torcs.cpp	23;"	d	file:
TIME_DURATION	can_user.cpp	23;"	d	file:
TORCS_MSG1	can_msg.h	5;"	d
TORCS_MSG2	can_msg.h	6;"	d
TORCS_MSG3	can_msg.h	7;"	d
TORCS_MSG4	can_msg.h	8;"	d
TORCS_MSG5	can_msg.h	9;"	d
USER_MSG1	can_msg.h	3;"	d
USER_MSG2	can_msg.h	4;"	d
can_msg	can_torcs.cpp	/^TPCANMsg can_msg[NUM_MSG];$/;"	v
can_msg	can_user.cpp	/^TPCANMsg can_msg[NUM_MSG];$/;"	v
cur	can_torcs.cpp	/^struct timeval prev, cur;$/;"	v	typeref:struct:
cur	can_user.cpp	/^struct timeval prev, cur;$/;"	v	typeref:struct:
do_exit	can_torcs.cpp	/^void do_exit(int error)$/;"	f
do_exit	can_user.cpp	/^void do_exit(int error)$/;"	f
dwPort	can_torcs.cpp	/^__u32 dwPort = 0;$/;"	v
dwPort	can_user.cpp	/^__u32 dwPort = 0;$/;"	v
free_shared_mem	can_torcs.cpp	/^int free_shared_mem(void *data, int id)$/;"	f
free_shared_mem	can_user.cpp	/^int free_shared_mem(void *data, int id)$/;"	f
h	can_torcs.cpp	/^HANDLE h;$/;"	v
h	can_user.cpp	/^HANDLE h;$/;"	v
init	can_torcs.cpp	/^void init()$/;"	f
init	can_user.cpp	/^void init()$/;"	f
init_shared_mem	can_torcs.cpp	/^void* init_shared_mem(int *id, int key, int data_size, int num_of_data, void *mem)$/;"	f
init_shared_mem	can_user.cpp	/^void* init_shared_mem(int *id, int key, int data_size, int num_of_data, void *mem)$/;"	f
loop_condition	can_torcs.cpp	/^int loop_condition = 0;$/;"	v
loop_condition	can_user.cpp	/^int loop_condition = 0;$/;"	v
main	can_torcs.cpp	/^int main(int argc, char *argv[])$/;"	f
main	can_user.cpp	/^int main(int argc, char *argv[])$/;"	f
main	test.cpp	/^int main(int argc, char *argv[])$/;"	f
nExtended	can_torcs.cpp	/^int nExtended = CAN_INIT_TYPE_ST;$/;"	v
nExtended	can_user.cpp	/^int nExtended = CAN_INIT_TYPE_ST;$/;"	v
nType	can_torcs.cpp	/^int nType = HW_PCI;$/;"	v
nType	can_user.cpp	/^int nType = HW_PCI;$/;"	v
num_msg	can_torcs.cpp	/^int num_msg = NUM_MSG;$/;"	v
num_msg	can_user.cpp	/^int num_msg = NUM_MSG;$/;"	v
prev	can_torcs.cpp	/^struct timeval prev, cur;$/;"	v	typeref:struct:timeval
prev	can_user.cpp	/^struct timeval prev, cur;$/;"	v	typeref:struct:timeval
receive_msg	can_torcs.cpp	/^TPCANMsg receive_msg;$/;"	v
receive_msg	can_user.cpp	/^TPCANMsg receive_msg;$/;"	v
receive_thread	can_torcs.cpp	/^void* receive_thread(void *arg)$/;"	f
receive_thread	can_user.cpp	/^void* receive_thread(void *arg)$/;"	f
send_data_via_CAN	can_torcs.cpp	/^void send_data_via_CAN(TPCANMsg *msg, float *data1, float *data2)$/;"	f
send_data_via_CAN	can_user.cpp	/^void send_data_via_CAN(TPCANMsg *msg, float *data1, float *data2)$/;"	f
shared_memory_input	can_torcs.cpp	/^void *shared_memory_input = (void *)0;$/;"	v
shared_memory_input	can_user.cpp	/^void *shared_memory_input = (void *)0;$/;"	v
shared_memory_output	can_torcs.cpp	/^void *shared_memory_output = (void *)0;$/;"	v
shared_memory_output	can_user.cpp	/^void *shared_memory_output = (void *)0;$/;"	v
shmid_input	can_torcs.cpp	/^int shmid_input;$/;"	v
shmid_input	can_user.cpp	/^int shmid_input;$/;"	v
shmid_output	can_torcs.cpp	/^int shmid_output;$/;"	v
shmid_output	can_user.cpp	/^int shmid_output;$/;"	v
signal_handler	can_torcs.cpp	/^void signal_handler(int signal)$/;"	f
signal_handler	can_user.cpp	/^void signal_handler(int signal)$/;"	f
size_torcs_output	can_torcs.cpp	/^int size_torcs_output = 200;$/;"	v
size_torcs_output	can_user.cpp	/^int size_torcs_output = 200;$/;"	v
size_user_input	can_torcs.cpp	/^int size_user_input = 10;	\/\/ 0: up, 1: down, 2: left, 3: right$/;"	v
size_user_input	can_user.cpp	/^int size_user_input = 10;	\/\/ 0: up, 1: down, 2: left, 3: right$/;"	v
szDevNode	can_torcs.cpp	/^const char *szDevNode = DEFAULT_NODE;$/;"	v
szDevNode	can_user.cpp	/^const char *szDevNode = DEFAULT_NODE;$/;"	v
time_duration	can_torcs.cpp	/^int time_duration = TIME_DURATION;$/;"	v
time_duration	can_user.cpp	/^int time_duration = TIME_DURATION;$/;"	v
torcs_output	can_torcs.cpp	/^float *torcs_output;$/;"	v
torcs_output	can_user.cpp	/^float *torcs_output;$/;"	v
txt	can_torcs.cpp	/^char txt[VERSIONSTRING_LEN];$/;"	v
txt	can_user.cpp	/^char txt[VERSIONSTRING_LEN];$/;"	v
user_input	can_torcs.cpp	/^float *user_input;$/;"	v
user_input	can_user.cpp	/^float *user_input;$/;"	v
wBTR0BTR1	can_torcs.cpp	/^__u16 wBTR0BTR1 = CAN_BAUD_1M;$/;"	v
wBTR0BTR1	can_user.cpp	/^__u16 wBTR0BTR1 = CAN_BAUD_1M;$/;"	v
wIrq	can_torcs.cpp	/^__u16 wIrq = 0;$/;"	v
wIrq	can_user.cpp	/^__u16 wIrq = 0;$/;"	v
wait_type_input	can_torcs.cpp	/^void* wait_type_input(void *arg)$/;"	f
wait_type_input	can_user.cpp	/^void* wait_type_input(void *arg)$/;"	f
